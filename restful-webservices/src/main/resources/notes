dcsc

return ResponseEntity to set a new response

So many logs coming in the broser means dev tools are enabled.
Once dev tooils are disabled only few lines of errors will come 
In production devtools will be disabled by default.(even if dont comment in pom file)


To throw exception:
	throw new exceptioName() ; 
	in this exceptionname class @ResponseStatus(code=HttpStatus.NOT_FOUND) annotation etc can be given to the class

we can send normal successfull response object also in response entity i think 
anyways if its error we can modify the response structure using the above class
	
	
ResponseEntityExceptionHandler -> class responsible for all the spring exceptions
When an exception is thrown , the response entity is returned by the ResponseEntityExceptionHandler class.
There is a handleException method which will return the response entity in many cases.
We can override this methode to return response entity if our type back .


@ControllerAdvice:
	variety of component annotation. valid across all controlllers
	
	
For documentation: Swagger
	it will give the swagger ui which will show all he rest apis and (http://localhost:8080/swagger-ui/index.html)
	Details of all the request response etc in a JSOn format also  (http://localhost:8080/v3/api-docs)
	
	
Content negotiation:
	The format(JSON or XML)  or the language(English , Malayalam)  the user want the response will be different
	This is configured in the request headers .header called"Accept"
	For this another format a dependancy is to be installed in pom
		groupid : com.fasterxml.jackson.dataformat
		artefact id : jackson-dataformat-xml 
	If dependancy is set and the Application/xml is given in request header
		The Object which is sent in the JSON will come in a xml format
	if we setup Accept: Application/xml in 
	
	
	
Internationalization:
	Accept-language header in the request .
	Getting the language from the header and ge tthe already configured message in java 
	
	
Versioning:
	Important when deploying an api to production etc.
	we can deploy another version of api and when the business is ready they cna start using the new vwersion 
	1.by url  ex: /v1/users , v2/users
	2.by request parameter
	3.by headers
		X-API-VERSION=1
	
	url versioning and req parameter versioning leads to URI POLLUTION
		Creating more urls 

HATEOAS: hypermedia as the engine of aplication state
	adding links to the the response by covering the response object in EntityModel
	
Serialization:
	Converting the object to stream(JSON)
	We can modify the serialization.ie. JSON names etc can be different from the object
	Annotations:
		@JsonProperty("New_fieldname_toPrintin_output")
		if some field should nt be returned in response
			1.Static filtering
				@JsonIgnore 
				@JsonIgnoreproperties("field1" , "field2")
			2.Dynamic filtering
				create of MappingJacksonValue(outputObject)
				set filters to it before
				create filters 
				Basically , creating  MappingJacksonValue with different filters with same filter name,
				and different filter logic so that in 2 requests 2 different filtering will happen.
				Have to add the filtername to the class with annotation JsonFilter("filterName")
				
Actuator:
	Production ready feature to monitor application 
	management.endpoints.web.exposure.include=* will enable all end points of actuator
	management.endpoints.web.exposure.include=beans,health for individual enabling 
	Actuator will details of everything about application 
	
	
@GetMapping(path = "/users/{id}/posts") when posts are also involved

connecting to another databases involve configuration of datasource in the application.properties

starter.security in pom will add spring security
	so all the api s will be password protected
	so if need to configure existing setup need to override spring filter chain setup 
	
	 