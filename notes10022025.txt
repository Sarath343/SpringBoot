@ConfigurationProperties(prefix = "server")
public class ServerProperties {}

@Autowired
DatabaseConfigProperties databaseConfigProperties;




switch(value){
	case "a":
		return "from a" ;
	case "b":
		return "from b";
	default:
		return "invalid";


}



Declaring an object with an interface reference restricts access to only the methods defined in the interface.
Declaring an object with the class reference allows access to all methods of that class and the methods of interface.
Polymorphism allows flexibility by programming to an interface, but it also limits method access.



Getting application context
ApplicationContext context = ApplicationContextProvider.getApplicationContext();
MyClass mClass = context.getBean(MyClass.class);



-------------
Caching in Java:

1.
HashMap and ConcurrenthashMap:
	ConcurrenthashMap is thread safe / synchronized : hashmap is not thread safe
	
	while iterating using multiple thread , hashmap may give ConcurrentModificationException
	ConcurrenthashMap wont give any exception in the above case
	
	null can be a key in hashmap
	null cannot be a key in concurrenthashmap
	
	concurrenthashmap to use when multiple threads are involved 
	
	
ConcurrenthashMap has a cool method computeIfAbsent(key,k->expenssiveOperation())
computeIfAbsent will take the key value and check if any value already exists in the concurrenthashmap
	if exists it will return that value 
	if not it will fo the expenssiveOperation and compute the value and return the value and add to the concurrenthashmap as well
	
	
2.	Using springboot annotations 

write a class CacheConfig annotated with @EnableCache and @COnfiguration  
	It allows methods annotated with @Cacheable, @CachePut, and @CacheEvict to cache results automatically.
	
 @Cacheable(value = "products", key = "#id") // Caches result
    public String getProductById(Long id) {
        System.out.println("Fetching product from DB...");
        return "Product-" + id;
    }
The first time getProductById() is called, the data is fetched from the database.
Subsequent calls return the cached data.

    @CachePut(value = "products", key = "#id") // Updates cache
    public String updateProduct(Long id) {
        System.out.println("Updating product...");
        return "Updated-Product-" + id;
    }

    @CacheEvict(value = "products", key = "#id") // Removes specific cache
    public void deleteProduct(Long id) {
        System.out.println("Deleting product...");
    }

    @CacheEvict(value = "products", allEntries = true) // Clears entire cache
    public void clearAllCache() {
        System.out.println("Clearing all cache...");
    }
	
	
	
	
------------------------
11/02
Java memoryModel
2 types of memory
	1.main memory (heap and static memory) -where all the objects and class level variables reside
	2.Workign memory - each threads has its own copy of variables . Those are stored here

------------------------
13/02
Space complexity:
	If the code creates a new data structure proportional to input size n , the space complexity is O(n)
	For recursive , the depth of function call is space complexity
	
	If no significant extra memory is used space complexity is O(1)
	Temporary variable in the for loop takes O(1) only 
	
Binary search of sorted array:
	time O(log(n)base2)  : each iteration splits the array into 2 small arrays 
	space:	O(1)
	
	public int binarySearch(int [] arr , target){
		int left = 0 ; 
		int right = 0 ; 
		while(left<=right){
			mid = left+(right-left)/2 ;
			if(target == arr[mid])
				return mid;
			else if(target>arr[mid]){
				left = mid+1 ;
			}
			else
				right = mid-1; 
		}
		return -1 ;
	}
	

Fibonacci - recursion
	time : O(2^n)
	space: O(n)
	
	int fibonacci(n){
		if(n<=1)
			return n;
		return fibonacci(n-1) +fibonacci(n-2) ;
	}
	
					fib(5)
				fib(4)		fib(3)
		fib(3)		fib(3)	fi(2)	fib(1)
	fib(2)	fib(1)	fib(2) fib(1)	fib(1) fib(0) 1
	
	nan increment in n is incresing the number of executions exponentially
	fib(1) ->	1
	fib(2) ->	2
	fib(3) ->	4
	fib(4) ->	8
	increasing n increments the number of function calls by 2^n so O(2^n)
	
	space complexity is counted by number the depth of recusrion here it is n 

